# -*- coding: utf-8 -*-
"""Sales_Prediction_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WoyEV0S5oP8WKdg-rZ-oBRA5OG6gY0uI
"""

import os

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from xgboost import XGBRFRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error,mean_squared_error , r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,LSTM
from tensorflow.keras.callbacks import EarlyStopping,ModelCheckpoint

sales_of_store= pd.read_csv("train.csv")
sales_of_store.head(10)

"""Here we are checking for null values and deleting them.

"""

sales_of_store.info()

sales_of_store = sales_of_store.drop(['store','item'],axis=1)

sales_of_store.info()

"""converting date to to dateTime datatype"""

sales_of_store['date']=pd.to_datetime(sales_of_store['date'])
sales_of_store.info()

"""converting date to a \month period and then sum the number of items in each month"""

sales_of_store['date']=sales_of_store['date'].dt.to_period("M")
sales_of_month = sales_of_store.groupby('date').sum().reset_index()

"""converting the resulting date column to timestamp datatype"""

sales_of_month['date'] = sales_of_month['date'].dt.to_timestamp()

sales_of_month.head(10)

# @title date vs sales

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['date']
  ys = series['sales']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = sales_of_month.sort_values('date', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('date')
_ = plt.ylabel('sales')
plt.title('Monthly sales of customers')

"""call the difference on the sales columns to make the sales data stationery"""

sales_of_month['sales_diff']=sales_of_month['sales'].diff()
sales_of_month=sales_of_month.dropna()
sales_of_month.head(10)

# @title date vs sales_diff

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['date']
  ys = series['sales_diff']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = sales_of_month.sort_values('date', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('date')
_ = plt.ylabel('sales_diff')

"""dropping off sales and date

"""

supervised_data= sales_of_month.drop(['date','sales'],axis=1)

"""preparing the supervised data

"""

for i in range(1,13):
  col_name = 'month_'+str(i)
  supervised_data[col_name] = supervised_data['sales_diff'].shift(i)
supervised_data = supervised_data.dropna().reset_index(drop=True)
supervised_data.head(10)

"""split the data into train and test"""

train_data = supervised_data[:-12]
test_data = supervised_data[-12:]
print("train datashape :" ,train_data.shape)
print("test datashape :" ,test_data.shape)

scaler= MinMaxScaler(feature_range=(-1,1))
scaler.fit(train_data)
train_data = scaler.transform(train_data)
test_data = scaler.transform(test_data)

x_train,y_train = train_data[:,1:],train_data[:,0:1]
x_test,y_test = test_data[:,1:],test_data[:,0:1]
y_train = y_train.ravel()
y_test = y_test.ravel()
print("X_train Shape :",x_train.shape)
print("Y_train Shape :",y_train.shape)
print("X_test Shape :",x_test.shape)
print("Y_test Shape :",y_test.shape)

"""Make prediction data frame to merge the predicted sales price of all trained algs"""

sales_dates = sales_of_month['date'][-12:].reset_index(drop=True)
predict_df = pd.DataFrame(sales_dates)

act_sales = sales_of_month['sales'][-13:].to_list()
print(act_sales)

"""To create Linear Regression model and also the preddicted outputs"""

lr_model = LinearRegression()
lr_model.fit(x_train,y_train)
lr_pre = lr_model.predict(x_test)

lr_pre = lr_pre.reshape(-1,1)
lr_pre_test_set = np.concatenate([lr_pre,x_test],axis=1)
lr_pre_test_set = scaler.inverse_transform(lr_pre_test_set)

result_list = []
for index in range(0, len(lr_pre_test_set)):
  result_list.append(lr_pre_test_set[index][0]+act_sales[index])
lr_pre_series = pd.Series(result_list,name='Linear Prediction')
predict_df = predict_df.merge(lr_pre_series,left_index=True,right_index=True)

lr_mse = np.sqrt(mean_squared_error(predict_df['Linear Prediction'],sales_of_month['sales'][-12:]))
lr_mae = mean_squared_error(predict_df['Linear Prediction'],sales_of_month['sales'][-12:])
lr_r2 = r2_score(predict_df['Linear Prediction'],sales_of_month['sales'][-12:])
print("Linear Regression MSE :",lr_mse)
print("Linear Regression MAE :",lr_mae)
print("Linear Regression R2 :",lr_r2)

"""Visualization of the prediction against the actual sales"""

plt.figure(figsize=(15,5))

plt.plot(sales_of_month['date'],sales_of_month['sales'])

plt.plot(predict_df['date'],predict_df['Linear Prediction'])
plt.title("Customer sales Forecast using Linear Regression Model")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.legend(['Actual Sales','Predicted Sales'])
plt.show()